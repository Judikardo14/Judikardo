import os
from flask import Flask, request
from threading import Thread
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import Update
import google.generativeai as genai

# Configuration des cl√©s API
TELEGRAM_TOKEN = "7939560231:AAFLiELtAiCucV6hP0n8uwUsQ6Opdwnvrhk"
GOOGLE_API_KEY = "AIzaSyDzDzivynuJ5vS8fyIYn7MW7mFXhzAVGX8"

# Initialisation de Flask
app = Flask('')

@app.route('/')
def home():
    return "Hello. I am alive!"

@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    application.process_update(update)
    return 'ok'

def run():
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', '10000')))

def keep_alive():
    t = Thread(target=run)
    t.start()

# Configuration de Gemini
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gestionnaire de la commande /start"""
    welcome_message = """
    üëã Bonjour! Je suis un bot aliment√© par Gemini et d√©velopp√© par Judikardo.
    Vous pouvez me poser des questions ou discuter avec moi sur n'importe quel sujet.
    Je ferai de mon mieux pour vous aider!
    """
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gestionnaire de la commande /help"""
    help_text = """
    ü§ñ Voici comment m'utiliser :
    - Envoyez-moi simplement un message et j'y r√©pondrai
    - Utilisez /start pour recommencer
    - Utilisez /help pour voir cette aide
    """
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gestionnaire pour tous les messages texte"""
    try:
        # Obtenir le message de l'utilisateur
        user_message = update.message.text

        # Indiquer que le bot est en train d'√©crire
        await update.message.chat.send_action(action="typing")

        # G√©n√©rer la r√©ponse avec Gemini
        response = model.generate_content(user_message)

        # Envoyer la r√©ponse
        if response.text:
            # Diviser le message si trop long
            if len(response.text) > 4096:
                chunks = [response.text[i:i+4096] for i in range(0, len(response.text), 4096)]
                for chunk in chunks:
                    await update.message.reply_text(chunk)
            else:
                await update.message.reply_text(response.text)
        else:
            await update.message.reply_text("D√©sol√©, je n'ai pas pu g√©n√©rer une r√©ponse appropri√©e.")

    except Exception as e:
        print(f"Erreur: {str(e)}")
        await update.message.reply_text(
            "D√©sol√©, une erreur s'est produite lors du traitement de votre message. "
            "Veuillez r√©essayer plus tard."
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gestionnaire d'erreurs global"""
    print(f'Erreur: {context.error}')
    await update.message.reply_text(
        "Une erreur s'est produite. Veuillez r√©essayer plus tard."
    )

def main():
    """Fonction principale"""

    #keep_alive()

    # Cr√©er l'application
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # Ajouter les gestionnaires
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Ajouter le gestionnaire d'erreurs
    application.add_error_handler(error_handler)

    # Configurer le webhook
    webhook_url = "https://monbot-8cnm.onrender.com" + TELEGRAM_TOKEN
    application.bot.set_webhook(webhook_url)

    # D√©marrer le bot
    print("Bot d√©marr√©...")
    application.run_webhook(listen='0.0.0.0', port=int(os.environ.get('PORT', '10000')), webhook_url=webhook_url)

if __name__ == '__main__':
    main()

